# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQf23gFkIL2YJl4_Eqib6r2YBhDDGs2l
"""

import streamlit as st
import pandas as pd
import joblib
import tldextract
import re

# Load the trained model
model = joblib.load('phishing_detector.pkl')

st.set_page_config(page_title="Phishing Detector", page_icon="üõ°Ô∏è")
st.title("üõ°Ô∏è Phishing Website Detection Tool")
st.markdown("Enter a website URL and check if it's **phishing** or **legitimate**.")

# Extract basic features from URL
def extract_url_features(url):
    ext = tldextract.extract(url)
    hostname = ext.domain + '.' + ext.suffix
    path = url.split(hostname)[-1] if hostname in url else ""

    features = {
        'length_url': len(url),
        'length_hostname': len(hostname),
        'ip': 1 if re.match(r"(http[s]?://)?\d{1,3}(\.\d{1,3}){3}", url) else 0,
        'nb_dots': url.count('.'),
        'nb_hyphens': url.count('-'),
        'nb_at': url.count('@'),
        'nb_qm': url.count('?'),
        'nb_and': url.count('&'),
        'nb_or': url.count('|'),
        'nb_eq': url.count('='),
        'nb_underscore': url.count('_'),
        'nb_tilde': url.count('~'),
        'nb_percent': url.count('%'),
        'nb_slash': url.count('/'),
        'nb_star': url.count('*'),
        'nb_colon': url.count(':'),
        'nb_comma': url.count(','),
        'nb_semicolumn': url.count(';'),
        'nb_dollar': url.count('$'),
        'nb_space': url.count(' '),
        'nb_www': url.count('www'),
        'nb_com': url.count('.com'),
        'nb_dslash': url.count('//'),
        'http_in_path': 1 if 'http' in path else 0,
        'https_token': 1 if 'https' in url[8:] else 0,
        'ratio_digits_url': sum(c.isdigit() for c in url)/len(url),
        'ratio_digits_host': sum(c.isdigit() for c in hostname)/len(hostname),
    }

    return pd.DataFrame([features])

# UI Input
url = st.text_input("üîó Enter URL")

if st.button("Check URL"):
    if url:
        features_df = extract_url_features(url)
        try:
            result = model.predict(features_df)[0]
            if result == 1:
                st.error("üö® This is likely a **Phishing** site.")
            else:
                st.success("‚úÖ This appears to be a **Legitimate** site.")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Unable to classify this URL.\nError: {e}")
    else:
        st.warning("Please enter a URL.")